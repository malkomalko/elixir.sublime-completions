{"scope":"source.elixir","completions":[{"trigger":"Module.add_doc(${1:module}, ${2:line}, ${3:kind}, ${4:tuple}, ${5:signature}, ${6:doc})","contents":"add_doc(${1:module}, ${2:line}, ${3:kind}, ${4:tuple}, ${5:signature}, ${6:doc})"},{"trigger":"Module.concat(${1:list})","contents":"concat(${1:list})"},{"trigger":"Module.concat(${1:left}, ${2:right})","contents":"concat(${1:left}, ${2:right})"},{"trigger":"Module.create(${1:module}, ${2:quoted}, ${3:opts // []})","contents":"create(${1:module}, ${2:quoted}, ${3:opts // []})"},{"trigger":"Module.defines?(${1:module}, ${2:tuple})","contents":"defines?(${1:module}, ${2:tuple})"},{"trigger":"Module.defines?(${1:module}, ${2:tuple}, ${3:kind})","contents":"defines?(${1:module}, ${2:tuple}, ${3:kind})"},{"trigger":"Module.definitions_in(${1:module})","contents":"definitions_in(${1:module})"},{"trigger":"Module.definitions_in(${1:module}, ${2:kind})","contents":"definitions_in(${1:module}, ${2:kind})"},{"trigger":"Module.delete_attribute(${1:module}, ${2:key})","contents":"delete_attribute(${1:module}, ${2:key})"},{"trigger":"Module.eval_quoted(${1:module}, ${2:quoted}, ${3:binding // []}, ${4:opts // []})","contents":"eval_quoted(${1:module}, ${2:quoted}, ${3:binding // []}, ${4:opts // []})"},{"trigger":"Module.get_attribute(${1:module}, ${2:key})","contents":"get_attribute(${1:module}, ${2:key})"},{"trigger":"Module.make_overridable(${1:module}, ${2:tuples})","contents":"make_overridable(${1:module}, ${2:tuples})"},{"trigger":"Module.open?(${1:module})","contents":"open?(${1:module})"},{"trigger":"Module.overridable?(${1:module}, ${2:tuple})","contents":"overridable?(${1:module}, ${2:tuple})"},{"trigger":"Module.put_attribute(${1:module}, ${2:key}, ${3:value})","contents":"put_attribute(${1:module}, ${2:key}, ${3:value})"},{"trigger":"Module.register_attribute(${1:module}, ${2:new}, ${3:opts // []})","contents":"register_attribute(${1:module}, ${2:new}, ${3:opts // []})"},{"trigger":"Module.safe_concat(${1:list})","contents":"safe_concat(${1:list})"},{"trigger":"Module.safe_concat(${1:left}, ${2:right})","contents":"safe_concat(${1:left}, ${2:right})"},{"trigger":"Module.split(${1:module})","contents":"split(${1:module})"},{"trigger":"Module.to_binary(${1:module})","contents":"to_binary(${1:module})"}]}