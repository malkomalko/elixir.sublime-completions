{"scope":"source.elixir","completions":[{"trigger":"Code.append_path(${1:path})","contents":"append_path(${1:path})"},{"trigger":"Code.compile_quoted(${1:quoted}, ${2:file // \"nofile\"})","contents":"compile_quoted(${1:quoted}, ${2:file // \"nofile\"})"},{"trigger":"Code.compile_string(${1:string}, ${2:file // \"nofile\"})","contents":"compile_string(${1:string}, ${2:file // \"nofile\"})"},{"trigger":"Code.compiler_options()","contents":"compiler_options()"},{"trigger":"Code.compiler_options(${1:opts})","contents":"compiler_options(${1:opts})"},{"trigger":"Code.delete_path(${1:path})","contents":"delete_path(${1:path})"},{"trigger":"Code.ensure_compiled(${1:module})","contents":"ensure_compiled(${1:module})"},{"trigger":"Code.ensure_compiled?(${1:module})","contents":"ensure_compiled?(${1:module})"},{"trigger":"Code.ensure_loaded(${1:module})","contents":"ensure_loaded(${1:module})"},{"trigger":"Code.ensure_loaded?(${1:module})","contents":"ensure_loaded?(${1:module})"},{"trigger":"Code.eval_quoted(${1:quoted}, ${2:binding // []}, ${3:opts // []})","contents":"eval_quoted(${1:quoted}, ${2:binding // []}, ${3:opts // []})"},{"trigger":"Code.eval_string(${1:string}, ${2:binding // []}, ${3:opts // []})","contents":"eval_string(${1:string}, ${2:binding // []}, ${3:opts // []})"},{"trigger":"Code.load_file(${1:file}, ${2:relative_to // nil})","contents":"load_file(${1:file}, ${2:relative_to // nil})"},{"trigger":"Code.loaded_files()","contents":"loaded_files()"},{"trigger":"Code.prepend_path(${1:path})","contents":"prepend_path(${1:path})"},{"trigger":"Code.require_file(${1:file}, ${2:relative_to // nil})","contents":"require_file(${1:file}, ${2:relative_to // nil})"},{"trigger":"Code.string_to_ast(${1:string}, ${2:opts // []})","contents":"string_to_ast(${1:string}, ${2:opts // []})"},{"trigger":"Code.string_to_ast!(${1:string}, ${2:opts // []})","contents":"string_to_ast!(${1:string}, ${2:opts // []})"},{"trigger":"Code.unload_files(${1:files})","contents":"unload_files(${1:files})"}]}