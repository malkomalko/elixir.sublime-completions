{"scope":"source.elixir","completions":[{"trigger":"Enum.all?(${1:collection}, ${2:fun // fn x -> x end})","contents":"all?(${1:collection}, ${2:fun // fn x -> x end})"},{"trigger":"Enum.any?(${1:collection}, ${2:fun // fn x -> x end})","contents":"any?(${1:collection}, ${2:fun // fn x -> x end})"},{"trigger":"Enum.at(${1:collection}, ${2:n}, ${3:default // nil})","contents":"at(${1:collection}, ${2:n}, ${3:default // nil})"},{"trigger":"Enum.count(${1:collection})","contents":"count(${1:collection})"},{"trigger":"Enum.count(${1:collection}, ${2:fun})","contents":"count(${1:collection}, ${2:fun})"},{"trigger":"Enum.drop(${1:collection}, ${2:count})","contents":"drop(${1:collection}, ${2:count})"},{"trigger":"Enum.drop_while(${1:collection}, ${2:fun})","contents":"drop_while(${1:collection}, ${2:fun})"},{"trigger":"Enum.each(${1:collection}, ${2:fun})","contents":"each(${1:collection}, ${2:fun})"},{"trigger":"Enum.empty?(${1:collection})","contents":"empty?(${1:collection})"},{"trigger":"Enum.fetch(${1:collection}, ${2:n})","contents":"fetch(${1:collection}, ${2:n})"},{"trigger":"Enum.fetch!(${1:collection}, ${2:n})","contents":"fetch!(${1:collection}, ${2:n})"},{"trigger":"Enum.filter(${1:collection}, ${2:fun})","contents":"filter(${1:collection}, ${2:fun})"},{"trigger":"Enum.filter_map(${1:collection}, ${2:filter}, ${3:mapper})","contents":"filter_map(${1:collection}, ${2:filter}, ${3:mapper})"},{"trigger":"Enum.find(${1:collection}, ${2:ifnone // nil}, ${3:fun})","contents":"find(${1:collection}, ${2:ifnone // nil}, ${3:fun})"},{"trigger":"Enum.find_index(${1:collection}, ${2:fun})","contents":"find_index(${1:collection}, ${2:fun})"},{"trigger":"Enum.find_value(${1:collection}, ${2:ifnone // nil}, ${3:fun})","contents":"find_value(${1:collection}, ${2:ifnone // nil}, ${3:fun})"},{"trigger":"Enum.first(${1:collection})","contents":"first(${1:collection})"},{"trigger":"Enum.join(${1:collection}, ${2:joiner // \"\"})","contents":"join(${1:collection}, ${2:joiner // \"\"})"},{"trigger":"Enum.map(${1:collection}, ${2:fun})","contents":"map(${1:collection}, ${2:fun})"},{"trigger":"Enum.map_join(${1:collection}, ${2:joiner // \"\"}, ${3:mapper})","contents":"map_join(${1:collection}, ${2:joiner // \"\"}, ${3:mapper})"},{"trigger":"Enum.map_reduce(${1:collection}, ${2:acc}, ${3:fun})","contents":"map_reduce(${1:collection}, ${2:acc}, ${3:fun})"},{"trigger":"Enum.max(${1:collection})","contents":"max(${1:collection})"},{"trigger":"Enum.max(${1:collection}, ${2:fun})","contents":"max(${1:collection}, ${2:fun})"},{"trigger":"Enum.member?(${1:collection}, ${2:value})","contents":"member?(${1:collection}, ${2:value})"},{"trigger":"Enum.min(${1:collection})","contents":"min(${1:collection})"},{"trigger":"Enum.min(${1:collection}, ${2:fun})","contents":"min(${1:collection}, ${2:fun})"},{"trigger":"Enum.partition(${1:collection}, ${2:fun})","contents":"partition(${1:collection}, ${2:fun})"},{"trigger":"Enum.reduce(${1:collection}, ${2:acc}, ${3:fun})","contents":"reduce(${1:collection}, ${2:acc}, ${3:fun})"},{"trigger":"Enum.reverse(${1:collection})","contents":"reverse(${1:collection})"},{"trigger":"Enum.sort(${1:collection})","contents":"sort(${1:collection})"},{"trigger":"Enum.sort(${1:collection}, ${2:fun})","contents":"sort(${1:collection}, ${2:fun})"},{"trigger":"Enum.split(${1:collection}, ${2:count})","contents":"split(${1:collection}, ${2:count})"},{"trigger":"Enum.split_while(${1:collection}, ${2:fun})","contents":"split_while(${1:collection}, ${2:fun})"},{"trigger":"Enum.take(${1:collection}, ${2:count})","contents":"take(${1:collection}, ${2:count})"},{"trigger":"Enum.take_while(${1:collection}, ${2:fun})","contents":"take_while(${1:collection}, ${2:fun})"},{"trigger":"Enum.to_list(${1:collection})","contents":"to_list(${1:collection})"},{"trigger":"Enum.uniq(${1:collection}, ${2:fun // fn x -> x end})","contents":"uniq(${1:collection}, ${2:fun // fn x -> x end})"},{"trigger":"Enum.zip(${1:coll1}, ${2:coll2})","contents":"zip(${1:coll1}, ${2:coll2})"}]}